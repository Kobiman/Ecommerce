@page "/add-product"
@page "/add-product/{productId}"
<section class="section-content padding-y bg">
    <div class="container">
        <div class="card">
            <div class="row no-gutters">
                <aside class="col-md-6">
                    <article class="gallery-wrap">
                        <div class="img-big-wrap">
                            <a><img src="@product.Image"></a>
                        </div>

                    </article>
                </aside>
                <main class="col-md-6 border-left">
                    <article class="content-body">
                        <h4 class="card-title mb-4">Add Product</h4>
                        <EditForm Model="@product" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-row">
                                <div class="col form-group">
                                    <label>Name</label>
                                    <InputText name="productName" type="text" class="form-control" placeholder="" @bind-Value="product.Name"/>
                                </div>
                                <div class="col form-group">
                                    <label>Category</label>
                                    <InputText name="category" type="text" class="form-control" placeholder="" @bind-Value="product.Category"/>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="col form-group">
                                    <label>Price</label>
                                    <InputNumber name="price" type="number" class="form-control" placeholder="" @bind-Value="product.Price"/>
                                </div>
                                <div class="col form-group">
                                    <label>Brand</label>
                                    <InputText name="brand" type="text" class="form-control" placeholder="" @bind-Value="product.Brand"/>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Description</label>
                                <InputTextArea name="description" type="text" class="form-control" rows="6" placeholder="" @bind-Value="product.Description"></InputTextArea>
                            </div>
                            <div class="form-group">
                                <label for="exampleFormControlFile1">
                                    <InputFile OnChange="@OpenFileAsync" type="file" class="form-control-file"/>
                                </label>
                            </div>

                        <hr>
                        <div class="form-row">
                            <div class="col-md-2">
                                @*<button class="btn btn-primary" disabled>
                                    <span class="text">Save</span> <i class="fas fa-save"></i>
                                </button>*@
                                <button type="submit" class="btn btn-primary">
                                    <span class="text">Save</span>  <i class="fas fa-save"></i>
                                </button>
                                @*<button class="btn btn-primary" disabled>
                                    <span class="text">Save</span>  <i class="fas fa-save"></i>
                                </button>
                                <button class="btn btn-primary">
                                    <span class="text">Save</span>  <i class="fas fa-save"></i>
                                </button>*@
                            </div>

                            <div class="col-md-2">
                                <button class="btn  btn-outline-primary" [routerLink]="['/all-products']">
                                    <span class="text">Back</span> <i class="fas fa-arrow-circle-left"></i>
                                </button>
                            </div>
                        </div>
                        </EditForm>
                    </article>
                </main>
            </div>
        </div>
    </div>
</section>



@code {
    AddProductDto product = new AddProductDto();
    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(ProductId)){
            var result = await Http.GetFromJsonAsync<Result<GetProductDto>>($"api/Product/GetProduct/{ProductId}");
            if (result is not null && result.IsSucessful)
            {
                product = new AddProductDto
                {
                        Brand = result.Value.Brand,
                        Category = result.Value.Category,
                        Description = result.Value.Description,
                        Image = result.Value.Image,
                        Name = result.Value.Name,
                        Price = result.Value.Price,
                        ProductId = result.Value.ProductId
                };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var uri = ProductId == null ? "api/Product/AddProduct" : "api/Product/UpdateProduct";
        var response = await Http.PostAsJsonAsync(uri, product);
        var content = await response.Content.ReadFromJsonAsync<Result>();
        if (content is not null && content.IsSucessful)
        {
            product = new AddProductDto();
            //Snackbar.Add(content.Message, Severity.Success);
            //accountEvents.OnAccountAdded(this);
        }
        else if (content is not null && !content.IsSucessful)
        {
            //Snackbar.Add(content.Message, Severity.Success);
        }
        StateHasChanged();

    }

    async Task OpenFileAsync(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);
        var path = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";

        product.Image = path;
    }
}
